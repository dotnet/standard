<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(MicrosoftPackagingToolsTaskDirectory)' == ''">
    <MicrosoftPackagingToolsTaskDirectory>$(MSBuildThisFileDirectory)</MicrosoftPackagingToolsTaskDirectory>
    <MicrosoftPackagingToolsTaskDirectory Condition="'$(MSBuildRuntimeType)' != 'Core'">$(MSBuildThisFileDirectory)desktop/</MicrosoftPackagingToolsTaskDirectory>
  </PropertyGroup>

  <Choose>
    <!-- Allow completely disabling the conflict resolution targets-->
    <When Condition="'$(DisableHandlePackageFileConflicts)' == 'true'" />
    <!-- Condition here is a hack until https://github.com/dotnet/sdk/issues/534 is fixed -->
    <When Condition="'$(TargetFramework)' != '' or '$(TargetFrameworks)' != ''">
      <!-- NuGet 4, but missing inbox conflict resolution.  Emit an error -->
      <PropertyGroup>
        <PackagingToolsInsufficientSDKVersionAfter>ResolvePackageDependenciesForBuild</PackagingToolsInsufficientSDKVersionAfter>
      </PropertyGroup>
    </When>
    <When Condition="'$(ResolveNuGetPackages)' == 'true' and Exists('$(ProjectLockFile)')">
      <!-- NuGet 3, run after the target that constructs items from lock file -->
      <PropertyGroup>
        <HandlePackageFileConflictsAfter>ResolveNuGetPackageAssets</HandlePackageFileConflictsAfter>
      </PropertyGroup>
    </When>
    <Otherwise>
      <!-- NuGet 2, run before targets that consume references -->
      <PropertyGroup>
        <ResolveAssemblyReferencesDependsOn>$(ResolveAssemblyReferencesDependsOn);HandlePackageFileConflicts</ResolveAssemblyReferencesDependsOn>
        <PrepareResourcesDependsOn>HandlePackageFileConflicts;$(PrepareResourcesDependsOn)</PrepareResourcesDependsOn>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Target Name="PackagingToolsInsufficientSDKVersion" Condition="'$(PackagingToolsInsufficientSDKVersion)' != 'false'" AfterTargets="$(PackagingToolsInsufficientSDKVersionAfter)">
    <Error Text="The version of Microsoft.NET.Sdk used by this project is insufficient to support this package.  Please ensure you are using the .NET Core SDK 2.0 or higher, which is included in Visual Studio 2017 Update 15.3.  This error may be suppressed by setting PackagingToolsInsufficientSDKVersion=false." />
  </Target>

  <UsingTask TaskName="HandlePackageFileConflicts" AssemblyFile="$(MicrosoftPackagingToolsTaskDirectory)Microsoft.Packaging.Tools.Tasks.dll" />
  <Target Name="HandlePackageFileConflicts" AfterTargets="$(HandlePackageFileConflictsAfter)" DependsOnTargets="$(HandlePackageFileConflictsDependsOn)">
    <HandlePackageFileConflicts References="@(Reference)"
                                ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
                                OtherRuntimeItems="@(_LockFileAssemblies)"
                                PlatformManifests="@(PackageConflictPlatformManifests)"
                                ForcedPackages="$(PackageConflictForcedPackages)"
                                PreferredPackages="$(PackageConflictPreferredPackages)">
      <Output TaskParameter="ReferencesWithoutConflicts" ItemName="_ReferencesWithoutConflicts" />
      <Output TaskParameter="ReferenceCopyLocalPathsWithoutConflicts" ItemName="_ReferenceCopyLocalPathsWithoutConflicts" />
      <Output TaskParameter="Conflicts" ItemName="_ConflictPackageFiles" />
    </HandlePackageFileConflicts>

    <!-- Replace Reference / ReferenceCopyLocalPaths with the filtered lists.
         We must remove all and include rather than just remove since removal is based
         only on ItemSpec and duplicate ItemSpecs may exist with different metadata 
         (eg: HintPath) -->
    <ItemGroup>
      <Reference Remove="@(Reference)" />
      <Reference Include="@(_ReferencesWithoutConflicts)" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(_ReferenceCopyLocalPathsWithoutConflicts)" />
    </ItemGroup>
  </Target>

  <!-- The following target is used by desktop to determine if the project requires a netstandard reference -->
  <UsingTask TaskName="IsNETStandardRequired" AssemblyFile="$(MicrosoftPackagingToolsTaskDirectory)Microsoft.Packaging.Tools.Tasks.dll" />
  <Target Name="IsNETStandardRequired"
          Condition="'$(IsNETStandardRequired)' == ''">
    <IsNETStandardRequired References="@(Reference);@(_ResolvedProjectReferencePaths)">
      <Output TaskParameter="Required" PropertyName="IsNETStandardRequired" />
    </IsNETStandardRequired>
  </Target>
</Project>
